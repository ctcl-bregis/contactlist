# ContactList - CTCL 2023
# Date: June 9, 2023 - June 19, 2023
# Purpose: Management command for generating database models, form data and other files

# Valid data types
# - date: datetime.date object, editable via Django DateField form class
# - select: Value chosen by a dropdown menu
# - string: Text input with a text length limit
# - text: Text input without a text length limit

from django.core.management.base import BaseCommand, CommandError
import os, json, shutil
from datetime import datetime, timezone

def configchoices(dbconfig, ddconfig, themes):
    mdldd = ""
    for i in dbconfig:
        if i["datatype"] == "select":
            choicelist = f"choices_{i['col']} = [\n"
            choices = ddconfig[i["ddfile"]]
            # Add blank choice
            choicelist += f"    (\"\", \"\"),\n"
            for i in choices:
                choicelist += f"    (\"{i[0]}\", \"{i[1]}\"),\n"
            choicelist += "]\n\n"
            
            mdldd += choicelist
        
    choicelist = "choices_themes = [\n"
    for i in themes:
        i = i["theme"]
        choicelist += f"    (\"{i['int_name']}\", \"{i['disp_name']}\"),\n"
    choicelist += "]\n\n"
    
    themedd = choicelist
        
            
    d = datetime.now(timezone.utc)
    choicespy = """# ContactList - CTCL 2023
# Generated: {date}
# Purpose: Dropdown choices
# THIS FILE IS AUTOMATICALLY GENERATED

{mdldd}

{themedd}

""".format(date = d.strftime("%B %e, %Y"), mdldd = mdldd, themedd = themedd)

    return choicespy

def configmodels(dbconfig):    
    table = ""
    for i in dbconfig:
        dt = i["datatype"]
        
        if dt == "select":
            table += f"    {i['col']} = models.CharField(blank = True, max_length = 128, choices = choices.choices_{i['col']})\n" 
        elif dt == "string":
            table += f"    {i['col']} = models.CharField(blank = True, max_length = {i['max']})\n"
        elif dt == "text":
            table += f"    {i['col']} = models.TextField(blank = True, null = True)\n"
        elif dt == "date":
            table += f"    {i['col']} = models.DateField(null = True)\n"
        else:
            print(f"WARNING: Unknown datatype \"{dt}\", skipping")
        
    colnames = [i["col"] for i in dbconfig]
    colnames.append("tcrd")
    colnames.append("tmod")
    todict = "\"inid\": self.inid, "
    for i in colnames:
        todict += f"\"{i}\": self.{i}, "
    todict = "return {" + todict + "}"
    
    d = datetime.now(timezone.utc)
    modelspy = """# ContactList - CTCL 2023
# Generated: {date}
# Purpose: Database model metadata
# THIS FILE IS AUTOMATICALLY GENERATED

from django.utils import timezone
from django.db import models
from . import choices

class ContactItem(models.Model):
    # inid, tcrd, tmod are not defined by the configuration file
    inid = models.AutoField(primary_key = True)
    tcrd = models.DateTimeField(null = True)
    tmod = models.DateTimeField(null = True)

{table}

    class Meta:
        verbose_name_plural = "Contact Entries"

    def todict(self):
        {todict}
        
    def __str__(self):
        return self.name

""".format(date = d.strftime("%B %e, %Y"), table = table, todict = todict)
    
    return modelspy
    
def configfields(dbconfig, hconfig):
    fields = []
    labels = {}
    for i in dbconfig:
        dt = i["datatype"]
        col = i["col"]
        
        if dt in ["date", "select", "string", "text"]:
            fields.append(col)
            labels[col] = hconfig[col]
        else:
            pass
            
    d = datetime.now(timezone.utc)
    fieldspy = """# ContactList - CTCL 2023
# Generated: {date}
# Purpose: Django form data
# THIS FILE IS AUTOMATICALLY GENERATED

from django import forms
from . import choices
from .models import ContactItem

class ContactForm(forms.ModelForm):
    class Meta:
        model = ContactItem
        fields = {fields}
        labels = {labels}

class SettingsForm(forms.Form):
    theme = forms.CharField(label = "Theme Selection", widget = forms.Select(choices = choices.choices_themes))

""".format(date = d.strftime("%B %e, %Y"), fields = fields, labels = labels)

    return fieldspy

class Command(BaseCommand):
    help = "Generates a model.py for the application using config files under config/database/"
    
    def handle(self, *args, **options):
        # Create a backup of the database since migrations may wipe the data
        if os.path.exists("db.sqlite3"):
            if os.path.exists("db_backup.sqlite3"):
                os.remove("db_backup.sqlite3")
                
            shutil.copyfile("db.sqlite3", "db_backup.sqlite3")
        
        # Current working directory should be the project root
        try:
            with open("config/config.json") as f:
                jsonconfig = json.loads(f.read())
                dbconfig = jsonconfig["config"]["table"]
                tconfig = jsonconfig["config"]["htmltable"]
                ddconfig = jsonconfig["config"]["dropdown"]
                hconfig = jsonconfig["config"]["headers"]
        except FileNotFoundError:
            print("config/config.json does not exist")
            return
    
        themedir = [f for f in os.listdir("config/themes") if os.path.isdir(os.path.join("config/themes", f))]
        themes = []
        for i in themedir:
            try:
                with open(f"config/themes/{i}/index.json") as f:
                    themedata = dict(json.load(f))
            except FileNotFoundError:
                print(f"lib.py WARNING: Theme \"{i}\" does not have a index.json, it would not be available")
                pass
                
            themes.append(themedata)
        
    
        with open("contactlist/choices.py", "w") as f:
            f.write(configchoices(dbconfig, ddconfig, themes))
        
        with open("contactlist/models.py", "w") as f:
            f.write(configmodels(dbconfig))
            
        with open("contactlist/fields.py", "w") as f:
            f.write(configfields(dbconfig, hconfig))
